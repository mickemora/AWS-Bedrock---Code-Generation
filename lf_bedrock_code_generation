import boto3
import botocore.config
import json
import traceback
from datetime import datetime

def generate_code_using_bedrock(message:str, language:str) ->str:

    prompt_text = f"""\n\nHuman: Write {language} code for the following instructions: {message}\n\nAssistant:"""
    print(prompt_text)

    body = {
        "prompt": prompt_text,
        "max_tokens_to_sample": 2048,
        "temperature": 0.1,
        "top_k": 250,
        "top_p": 0.2,
        "stop_sequences":["\n\nHuman:"]
    }

    try:
        print("1")
        bedrock = boto3.client("bedrock-runtime", region_name="us-east-1", config=botocore.config.Config(read_timeout=300, retries = {'max_attempts':3}))
        print("2")
        response = bedrock.invoke_model(modelId="anthropic.claude-v2:1", body=json.dumps(body), contentType="application/json", accept="application/json")
        traceback.print_exc()
        print("3")
        response_content = response.get("body").read().decode("utf-8")
        print("4")
        response_data = json.loads(response_content)
        print("5")
        code = response_data["completion"].strip()
        return code
    except Exception as e:
        print(f"Error: {e}")
        traceback.print_exc()
        return ""


def save_code_to_s3(code, s3_bucket, s3_key):
    s3 = boto3.client("s3")

    try:
        s3.put_object(Bucket=s3_bucket, Key=s3_key, Body=code)
        print("Code saved to S3")
    except Exception as e:
        print(f"Error: {e}")


def lambda_handler(event, context):
    event = json.loads(event['body'])
    message = event['message']
    language = event['language']
    print(message, language)

    try:
        generated_code = generate_code_using_bedrock(message, language)
        if generated_code:
            current_time = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
            s3_key = f"generated_code/{language}/{current_time}.py"
            s3_bucket = 'bedrock-course-bucket-mora'
            print("Saving code into S3")
            save_code_to_s3(generated_code, s3_bucket, s3_key)
        else:
            print("Failed to generate code.")
        return {
            'statusCode': 200,
            'body': json.dumps('Code generated successfully!')
        }
    except Exception as e:
        print(f"Error: {e}")
        import traceback
        traceback.print_exc()
        return {
            'statusCode': 500,
            'body': json.dumps({'Error generating code.': str(e)})
        }
